{"remainingRequest":"/Users/ovisaccani/Downloads/Ejercicio NT/ejercicio nt formulario/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/ovisaccani/Downloads/Ejercicio NT/ejercicio nt formulario/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ovisaccani/Downloads/Ejercicio NT/ejercicio nt formulario/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ovisaccani/Downloads/Ejercicio NT/ejercicio nt formulario/src/componentes/ApiRestFull.vue?vue&type=template&id=eab476a0&scoped=true&","dependencies":[{"path":"/Users/ovisaccani/Downloads/Ejercicio NT/ejercicio nt formulario/src/componentes/ApiRestFull.vue","mtime":1621836426208},{"path":"/Users/ovisaccani/Downloads/Ejercicio NT/ejercicio nt formulario/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ovisaccani/Downloads/Ejercicio NT/ejercicio nt formulario/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/ovisaccani/Downloads/Ejercicio NT/ejercicio nt formulario/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ovisaccani/Downloads/Ejercicio NT/ejercicio nt formulario/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}